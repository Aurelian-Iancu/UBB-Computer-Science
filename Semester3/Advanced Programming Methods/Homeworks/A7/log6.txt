Id: 5
Execution stack: 
(int v|(v = 4|(while(v > 0){(Print(v)|v = v - 1)}|Print(v))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
int v
(v = 4|(while(v > 0){(Print(v)|v = v - 1)}|Print(v)))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
int v
(v = 4|(while(v > 0){(Print(v)|v = v - 1)}|Print(v)))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(v = 4|(while(v > 0){(Print(v)|v = v - 1)}|Print(v)))
Symbol table: 
v -> 0
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(v = 4|(while(v > 0){(Print(v)|v = v - 1)}|Print(v)))
Symbol table: 
v -> 0
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = 4
(while(v > 0){(Print(v)|v = v - 1)}|Print(v))
Symbol table: 
v -> 0
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = 4
(while(v > 0){(Print(v)|v = v - 1)}|Print(v))
Symbol table: 
v -> 0
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(while(v > 0){(Print(v)|v = v - 1)}|Print(v))
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(while(v > 0){(Print(v)|v = v - 1)}|Print(v))
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 4
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 3
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 2
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
(Print(v)|v = v - 1)
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
1
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
v = v - 1
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 1
Output list: 
4
3
2
1
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 0
Output list: 
4
3
2
1
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
while(v > 0){(Print(v)|v = v - 1)}
Print(v)
Symbol table: 
v -> 0
Output list: 
4
3
2
1
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
Symbol table: 
v -> 0
Output list: 
4
3
2
1
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Print(v)
Symbol table: 
v -> 0
Output list: 
4
3
2
1
File table:
Heap memory:
Lock Table:

Id: 5
Execution stack: 
Symbol table: 
v -> 0
Output list: 
4
3
2
1
0
File table:
Heap memory:
Lock Table:

