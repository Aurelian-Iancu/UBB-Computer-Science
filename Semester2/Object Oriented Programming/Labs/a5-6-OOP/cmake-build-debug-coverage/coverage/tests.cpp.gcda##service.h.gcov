        -:    0:Source:C:/Users/Aurelian/Documents/GitHub/OOP/a5-6-913-Iancu-Gheorghe-Aurelian/service.h
        -:    0:Graph:C:\Users\Aurelian\Documents\GitHub\OOP\a5-6-913-Iancu-Gheorghe-Aurelian\cmake-build-debug-coverage\CMakeFiles\a5_6_913_Iancu_Gheorghe_Aurelian.dir\tests.cpp.gcno
        -:    0:Data:C:\Users\Aurelian\Documents\GitHub\OOP\a5-6-913-Iancu-Gheorghe-Aurelian\cmake-build-debug-coverage\CMakeFiles\a5_6_913_Iancu_Gheorghe_Aurelian.dir\tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include "repository.h"
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:#include "comparator.h"
        -:    6:
        -:    7:class Service{
        -:    8:    Repository *repository;
        -:    9:public:
        -:   10:    ///Service constructor
        -:   11:    explicit Service(Repository *repo);
        -:   12:
        -:   13:    ///Getter for the repository in service
        -:   14:    Movie * getAllService();
        -:   15:
        -:   16:    ///Getter for the size in service
        -:   17:    int getSizeService();
        -:   18:
        -:   19:    ///Getter for the capacity in service
        -:   20:    int getCapacityService();
        -:   21:
        -:   22:    ///Function that adds a Movie in the service
        -:   23:    int addService(const std::string &title, const std::string &genre, int year, int numberOfLikes,const std::string &trailer);
        -:   24:
        -:   25:    ///Function that removes a Movie with a certain title from the repository
        -:   26:    int removeService(std::string title);
        -:   27:
        -:   28:    ///Function that updates a Movie
        -:   29:    int updateService(const std::string oldName,const std::string newName, const std::string newGenre,
        -:   30:                               int newYear, int newNumberOfLikes, const std::string newTrailer);
        -:   31:
        -:   32:    ///Destructor for the service class
        -:   33:    ~Service();
        -:   34:
        -:   35:    int findByTitleService(const std::string &title);
        -:   36:};
        -:   37:
        -:   38:template <typename TElem>
function _Z12sortElementsI5MovieEvRSt6vectorIT_SaIS2_EEP10ComparatorIS2_E called 2 returned 100% blocks executed 80%
        2:   39:void sortElements(std::vector<TElem>& v, Comparator<TElem>* c) {
        -:   40:
        2:   41:    bool sorted = true;
        2:   41-block  0
        -:   42:
        -:   43:    do
        -:   44:    {
        4:   45:        sorted = true;
        -:   46:
       12:   47:        for (int i = 0; i < v.size() - 1; i++)
        4:   47-block  0
        8:   47-block  1
       12:   47-block  2
call    0 returned 12
branch  1 taken 8
branch  2 taken 4 (fallthrough)
        -:   48:        {
        8:   49:            if (!c->compare(v[i], v[i + 1]))
        8:   49-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:   49-block  1
call    6 returned 8
branch  7 taken 8 (fallthrough)
branch  8 taken 0 (throw)
        8:   49-block  2
call    9 returned 8
call   10 returned 8
branch 11 taken 4 (fallthrough)
branch 12 taken 4
    $$$$$:   49-block  3
call   13 never executed
    $$$$$:   49-block  4
    $$$$$:   49-block  5
call   14 never executed
        -:   50:            {
        4:   51:                std::swap(v[i], v[i + 1]);
        4:   51-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
        4:   52:                sorted = false;
        -:   53:            }
        -:   54:        }
        4:   55:    } while (!sorted);
        4:   55-block  0
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        -:   56:
        2:   57:}
        2:   57-block  0
