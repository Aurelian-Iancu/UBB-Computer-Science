start -> (-1, -1)
{ -> (-1, -1)
identifier -> (3, 3)
oftype -> (-1, -1)
int -> (-1, -1)
; -> (-1, -1)
bagă -> (-1, -1)
( -> (-1, -1)
identifier -> (3, 3)
) -> (-1, -1)
; -> (-1, -1)
identifier -> (23, 23)
oftype -> (-1, -1)
int -> (-1, -1)
; -> (-1, -1)
identifier -> (23, 23)
= -> (-1, -1)
const -> (3, 3)
; -> (-1, -1)
identifier -> (30, 30)
oftype -> (-1, -1)
int -> (-1, -1)
; -> (-1, -1)
identifier -> (30, 30)
= -> (-1, -1)
const -> (1, 1)
; -> (-1, -1)
cattimp -> (-1, -1)
( -> (-1, -1)
identifier -> (23, 23)
< -> (-1, -1)
identifier -> (3, 3)
/ -> (-1, -1)
const -> (3, 3)
) -> (-1, -1)
fă -> (-1, -1)
{ -> (-1, -1)
oare -> (-1, -1)
( -> (-1, -1)
identifier -> (3, 3)
m -> (-1, -1)
o -> (-1, -1)
d -> (-1, -1)
b -> (-1, -1)
) -> (-1, -1)
atunci -> (-1, -1)
{ -> (-1, -1)
identifier -> (30, 30)
= -> (-1, -1)
const -> (2, 2)
; -> (-1, -1)
} -> (-1, -1)
identifier -> (23, 23)
= -> (-1, -1)
identifier -> (23, 23)
+ -> (-1, -1)
const -> (2, 2)
; -> (-1, -1)
} -> (-1, -1)
oare -> (-1, -1)
( -> (-1, -1)
identifier -> (30, 30)
= -> (-1, -1)
= -> (-1, -1)
const -> (2, 2)
) -> (-1, -1)
atunci -> (-1, -1)
{ -> (-1, -1)
arată -> (-1, -1)
( -> (-1, -1)
const -> (39, 39)
) -> (-1, -1)
; -> (-1, -1)
} -> (-1, -1)
altfel -> (-1, -1)
{ -> (-1, -1)
arată -> (-1, -1)
( -> (-1, -1)
const -> (16, 16)
) -> (-1, -1)
; -> (-1, -1)
} -> (-1, -1)
} -> (-1, -1)
